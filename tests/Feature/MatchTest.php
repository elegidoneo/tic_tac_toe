<?php

namespace Tests\Feature;

use App\Board;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class MatchTest extends TestCase
{
    use RefreshDatabase;

    public $data, $row, $column, $diagonal;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->data = factory(Board::class)->create();
        $this->row = [[0,1,2],[3,4,5]];
        $this->column = [[0,3,6],[1,4,7]];
        $this->diagonal = [[0,4,8],[2,4,6]];

    }

    /** @test */
    public function a_user_sees_match_list()
    {
        $response = $this->get('/api/match');
        $response->assertStatus(200);
        $response->assertOk();
        $response->assertSuccessful();
        $result = $response->json();
        $this->arrayHasKey("board", $response);
        $this->arrayHasKey("winner", $response);
        $this->arrayHasKey("next", $response);
        $this->arrayHasKey("name", $response);
        $this->assertCount(9, $result[0]['board']);
    }

    /** @test */
    public function a_user_creates_a_board()
    {
        $response = $this->post('/api/match');
        $response->assertStatus(200);
        $response->assertOk();
        $response->assertSuccessful();
        $result = $response->json();
        $this->arrayHasKey("board", $response);
        $this->arrayHasKey("winner", $response);
        $this->arrayHasKey("next", $response);
        $this->arrayHasKey("name", $response);
        $this->assertCount(9, $result[0]['board']);
    }

    /** @test */
    public function a_user_searches_for_a_board_that_does_not_exist()
    {
        $response = $this->get('/api/match/100');
        $response->assertStatus(404);
        $response->assertNotFound();
        $this->withExceptionHandling();
    }

    /** @test */
    public function a_user_enters_an_existing_board()
    {
        factory(Board::class)->create();
        $response = $this->get('/api/match/'.$this->data['id']);
        $response->assertStatus(200);
        $response->assertOk();
        $response->assertSuccessful();
        $result = $response->json();

        $this->arrayHasKey("board", $response);
        $this->arrayHasKey("winner", $response);
        $this->arrayHasKey("next", $response);
        $this->arrayHasKey("name", $response);
        $this->assertCount(9, $result['board']);
    }

    /** @test */
    public function a_user_starts_his_movement()
    {
        $response = $this->put('/api/match/'.$this->data['id'], [
            "position" => 0
        ]);
        $response->assertStatus(200);
        $response->assertOk();
        $response->assertSuccessful();
        $result = $response->json();

        $this->arrayHasKey("board", $response);
        $this->arrayHasKey("winner", $response);
        $this->arrayHasKey("next", $response);
        $this->arrayHasKey("name", $response);
        $this->assertCount(9, $result['board']);
    }

    /** @test */
    public function a_user_does_not_make_movement()
    {
        $response = $this->put('/api/match/'.$this->data['id']);
        $response->assertStatus(422);
        $response->assertJson(["position" => ["The position field is required."]]);
    }

    /** @test */
    public function a_user_sends_a_string_in_position()
    {
        $response = $this->put('/api/match/'.$this->data['id'], [
            "position" => "test"
        ]);
        $response->assertStatus(422);
        $response->assertJson(["position" => ["The position must be a number."]]);
    }

    /** @test */
    public function a_user_enters_a_busy_position()
    {
        $data = factory(Board::class)->create([
            "board" => [1,0,0,0,0,0,0,0,0]
        ]);
        $response = $this->put('/api/match/'.$data['id'], [
            "position" => 0
        ]);
        $response->assertStatus(422);
        $response->assertJson(["error" => "occupied position"]);
    }

    /** @test */
    public function a_user_wins_diagonally()
    {
        $next = Board::X;
        $random1 = $this->diagonal[0];
        $random2 = $this->diagonal[1];

        for ($i = 0; $i <= 8; $i++) {

            if ($next == 1 && in_array($i,$random1)) {
                $position = $random1[array_search($i, $random1)];
            } else {
                $position = $random2[array_search($i, $random2)];
            }

            $next = $next == Board::X ? Board::O : Board::X;
            $response = $this->put('/api/match/'.$this->data['id'], [
                "position" => $position
            ]);
            $data[] = $response->content();

        }
        $response->assertOk();
    }

    /** @test */
    public function a_user_wins_diagonally_reverse()
    {
        $next = Board::X;
        $random = $this->diagonal[1];

        for ($i = 0; $i <= 8; $i++) {
            $position = $i;
            if ($next == 1) {
                if (in_array($i, $random)) {
                    $position = $i;
                }
            }
            $next = $next == Board::X ? Board::O : Board::X;
            $response = $this->put('/api/match/'.$this->data['id'], [
                "position" => $position
            ]);

            $data[] = $response->content();

        }
        $response->assertOk();
    }

    /** @test */
    public function a_user_wins_horizontally()
    {
        $random1 = $this->row[0];
        $random2 = $this->row[1];
        $delay = 0;

        for ($i = 0; $i <= 8; $i++) {
            if ($delay == 0 && !empty($random1)) {
                $position = $random1[0];
                unset($random1[0]);
                $random1 = array_values($random1);
                $delay = 1;
            } elseif(!empty($random2)) {
                $position = $random2[0];
                unset($random2[0]);
                $random2 = array_values($random2);
                $delay = 0;
            }

            $response = $this->put('/api/match/'.$this->data['id'], [
                "position" => $position
            ]);

            $data[] = $response->content();

        }
        $response->assertOk();
    }

    /** @test */
    public function a_user_wins_vertically()
    {
        $random1 = $this->column[0];
        $random2 = $this->column[1];
        $delay = 0;

        for ($i = 0; $i <= 8; $i++) {
            if ($delay == 0 && !empty($random1)) {
                $position = $random1[0];
                unset($random1[0]);
                $random1 = array_values($random1);
                $delay = 1;
            } elseif(!empty($random2)) {
                $position = $random2[0];
                unset($random2[0]);
                $random2 = array_values($random2);
                $delay = 0;
            }

            $response = $this->put('/api/match/'.$this->data['id'], [
                "position" => $position
            ]);

            $data[] = $response->content();

        }
        $response->assertOk();
    }
}
